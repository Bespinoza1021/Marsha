// Generated by gencpp from file marsha/Log.msg
// DO NOT EDIT!


#ifndef MARSHA_MESSAGE_LOG_H
#define MARSHA_MESSAGE_LOG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marsha
{
template <class ContainerAllocator>
struct Log_
{
  typedef Log_<ContainerAllocator> Type;

  Log_()
    : logLevel(0)
    , msg()  {
    }
  Log_(const ContainerAllocator& _alloc)
    : logLevel(0)
    , msg(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _logLevel_type;
  _logLevel_type logLevel;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  _msg_type msg;





  typedef boost::shared_ptr< ::marsha::Log_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marsha::Log_<ContainerAllocator> const> ConstPtr;

}; // struct Log_

typedef ::marsha::Log_<std::allocator<void> > Log;

typedef boost::shared_ptr< ::marsha::Log > LogPtr;
typedef boost::shared_ptr< ::marsha::Log const> LogConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marsha::Log_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marsha::Log_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marsha::Log_<ContainerAllocator1> & lhs, const ::marsha::Log_<ContainerAllocator2> & rhs)
{
  return lhs.logLevel == rhs.logLevel &&
    lhs.msg == rhs.msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marsha::Log_<ContainerAllocator1> & lhs, const ::marsha::Log_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marsha

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marsha::Log_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marsha::Log_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marsha::Log_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marsha::Log_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marsha::Log_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marsha::Log_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marsha::Log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "342fa202d332a78f4d751b1a33e13a8f";
  }

  static const char* value(const ::marsha::Log_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x342fa202d332a78fULL;
  static const uint64_t static_value2 = 0x4d751b1a33e13a8fULL;
};

template<class ContainerAllocator>
struct DataType< ::marsha::Log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marsha/Log";
  }

  static const char* value(const ::marsha::Log_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marsha::Log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 logLevel\n"
"string msg\n"
;
  }

  static const char* value(const ::marsha::Log_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marsha::Log_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.logLevel);
      stream.next(m.msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Log_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marsha::Log_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marsha::Log_<ContainerAllocator>& v)
  {
    s << indent << "logLevel: ";
    Printer<int32_t>::stream(s, indent + "  ", v.logLevel);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARSHA_MESSAGE_LOG_H
