#!/usr/bin/env python

import rospy
import subprocess
import os
from gazebo_msgs.srv import DeleteModel
from gazebo_msgs.srv import SpawnModel

from gazebo_msgs.srv import SetModelState
from gazebo_msgs.msg import ModelState

from geometry_msgs.msg import Twist
from geometry_msgs.msg import Pose

import random

import time


from std_srvs.srv import Trigger, TriggerResponse
MODEL_NAME = "pickup_box"

delete_model = rospy.ServiceProxy('/gazebo/delete_model', DeleteModel)
spawn_model = rospy.ServiceProxy('/gazebo/spawn_urdf_model', SpawnModel)
set_model = rospy.ServiceProxy('/gazebo/set_model_state', SetModelState)

# If change works well, reset and all its requirements can be deleted
def reset(req):
    pose = Pose()
    pose.position.x = random.uniform(-0.25, 0.5)
    pose.position.y = random.uniform(-0.25, 0.25)
    pose.position.z = 0.04
    twist = Twist()

    desired_state = ModelState('pickup_box', pose, twist, 'world')

    resp = set_model(desired_state)

    return(TriggerResponse(success = resp.success))


def server():
    rospy.init_node('reset_server')
    s = rospy.Service('reset', Trigger, reset)
    rospy.spin()

if __name__ == "__main__":
    server()