#!/usr/bin/env python

# reset

# Resets the position of the pickup object

# Author: Aaron Borger

# Todo: Fix the domain randomization, its annoying needing to give value to reset

import rospy
import subprocess
import os
from gazebo_msgs.srv import DeleteModel
from gazebo_msgs.srv import SpawnModel

from gazebo_msgs.srv import SetModelState
from gazebo_msgs.msg import ModelState

from geometry_msgs.msg import Twist
from geometry_msgs.msg import Pose

from marsha_msgs.srv import Reset

from marsha_gazebo.auto_domain_randomization import DRandomizer


import time

from std_srvs.srv import Trigger, TriggerResponse
MODEL_NAME = "pickup_object"

# Not using any more, but dont want to delete just incase
#delete_model = rospy.ServiceProxy('/gazebo/delete_model', DeleteModel)
#spawn_model = rospy.ServiceProxy('/gazebo/spawn_urdf_model', SpawnModel)
set_model = rospy.ServiceProxy('/gazebo/set_model_state', SetModelState)

randomizer = DRandomizer((2), (-0.25, 0.25))

# If change works well, reset and all its requirements can be deleted
def reset(req):

    domain, dar = randomizer.get_domain(req.reward)

    pose = Pose()
    pose.position.x = -0.4 #domain[0]  #-0.25
    pose.position.y = -0.05 #domain[1]  #-0.05
    pose.position.z = 0
    twist = Twist()

    desired_state = ModelState('pickup_object', pose, twist, 'world')

    resp = set_model(desired_state)
    #print('dar:', dar, type(dar))
    return(resp.success, dar)


def server():
    rospy.init_node('reset_server')
    s = rospy.Service('reset', Reset, reset)
    rospy.spin()

if __name__ == "__main__":
    server()